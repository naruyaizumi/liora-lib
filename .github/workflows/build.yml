name: Build and Release Native Binaries

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build on ubuntu-24.04 (${{ matrix.arch }})
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            npm_arch: x64
          - arch: arm64
            npm_arch: arm64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          check-latest: true

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential pkg-config cmake python3 python3-dev \
            ffmpeg imagemagick \
            libavformat-dev libavcodec-dev libavutil-dev \
            libswresample-dev libswscale-dev \
            libwebp-dev libpng-dev libjpeg-dev zlib1g-dev \
            libfreetype6-dev libharfbuzz-dev libpango1.0-dev \
            libgif-dev libopus-dev libvpx-dev \
            libcurl4-openssl-dev libnghttp2-dev libssl-dev

          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Install dependencies
        run: pnpm install --ignore-scripts

      - name: Build native addons
        env:
          npm_config_arch: ${{ matrix.npm_arch }}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi

          export CXXFLAGS="-O3 -fexceptions -fPIC -std=c++20"
          export LDFLAGS="-Wl,--as-needed -Wl,--gc-sections"

          pnpm run build:addon
          ls -lah build/Release/

      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: build/Release/
          if-no-files-found: error

  release:
    name: Create GitHub Release & Publish to npm
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          registry-url: 'https://registry.npmjs.org'

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Pack prebuild tarballs
        run: |
          mkdir -p dist
          for arch in x64 arm64; do
            src="artifacts/linux-$arch"
            tar -czf "dist/build-Linux-$arch.tar.gz" -C "$src" .
            echo "âœ” Packed build-Linux-$arch.tar.gz"
          done
          ls -lah dist/

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/build-Linux-*.tar.gz
          generate_release_notes: true

      - name: Publish to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm publish --access public